npm install prisma --save-dev
npm install @prisma/client

npx prisma init

.env
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/nextjsdb?schema=public"

# config
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

# migration
npx prisma migrate dev --name init


schema.schema:
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user table
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  active    Boolean
  createdAt DateTime @default(now())
}


model Service {
  id Int @id @default(autoincrement())
  name String
  description String
  active Boolean
  createdAt DateTime @default(now())
}


model Blog {
  id Int @id @default(autoincrement())
  title String
  content String
  active Boolean
  createdAt DateTime @default(now())
}


Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run prisma db pull to turn your database schema into a Prisma schema.
4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm
